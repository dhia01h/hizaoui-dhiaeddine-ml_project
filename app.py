from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import joblib
import numpy as np
import os

# Charger le mod√®le
MODEL_PATH = "random_forest.pkl"

if not os.path.exists(MODEL_PATH):
    raise Exception(f"‚ùå Fichier mod√®le {MODEL_PATH} non trouv√©. Entra√Ænez le mod√®le avant de lancer l'API.")

model = joblib.load(MODEL_PATH)

# Initialisation de l'application FastAPI
app = FastAPI(title="Churn Prediction API", description="API pour pr√©dire le churn des clients.")

# D√©finition du format des donn√©es d'entr√©e
class PredictionInput(BaseModel):
    features: list[float]  # Liste des valeurs des features (doit correspondre au mod√®le entra√Æn√©)

@app.post("/predict")
def predict(data: PredictionInput):
    """Effectue une pr√©diction en utilisant le mod√®le ML."""
    try:
        # V√©rifier que les features sont bien format√©es
        features = np.array(data.features).reshape(1, -1)

        # Pr√©diction avec le mod√®le
        prediction = model.predict(features)[0]
        probas = model.predict_proba(features)[0].tolist()

        return {
            "prediction": int(prediction),
            "probability": {"churn": probas[1], "no_churn": probas[0]}
        }
    
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Erreur lors de la pr√©diction : {str(e)}")

# Route de test
@app.get("/")
def root():
    return {"message": "üöÄ L'API est en ligne ! Utilisez /predict pour effectuer des pr√©dictions."}

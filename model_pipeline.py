"""
Main script for the Churn Prediction pipeline.
Handles data loading, training, evaluation, and MLflow logging.
"""


import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    roc_auc_score,
)


def prepare_data(filepath):
    """
    Charge et pr√©pare les donn√©es √† partir du fichier CSV.

    Args:
        filepath (str): Chemin vers le fichier CSV contenant les donn√©es.

    Returns:
        tuple: (x_train, x_test, y_train, y_test, scaler) apr√®s transformation.
    """
    print(f"üìÇ Chargement des donn√©es depuis {filepath}...")
    df = pd.read_csv(filepath)

    # V√©rifier si la colonne cible "Churn" existe
    if "Churn" not in df.columns:
        raise ValueError("‚ùå Erreur : La colonne 'Churn' est absente du dataset.")

    # Encodage des variables cat√©goriques
    for col in df.select_dtypes(include=["object"]).columns:
        df[col] = LabelEncoder().fit_transform(df[col])

    # S√©paration des features et de la cible
    x_features = df.drop(columns=["Churn"])
    y_target = df["Churn"]

    # Normalisation des donn√©es
    scaler = StandardScaler()
    x_scaled = scaler.fit_transform(x_features)

    # Split des donn√©es
    x_train, x_test, y_train, y_test = train_test_split(
        x_scaled, y_target, test_size=0.2, random_state=42
    )

    print("‚úÖ Donn√©es pr√©par√©es avec succ√®s !")
    return x_train, x_test, y_train, y_test, scaler


def train_model(x_train, y_train):
    """
    Entra√Æne un mod√®le Random Forest.

    Args:
        x_train (array-like): Donn√©es d'entra√Ænement.
        y_train (array-like): Labels d'entra√Ænement.

    Returns:
        RandomForestClassifier: Mod√®le entra√Æn√©.
    """
    print("üöÄ Entra√Ænement du mod√®le Random Forest...")
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(x_train, y_train)
    print("‚úÖ Mod√®le entra√Æn√© avec succ√®s !")
    return model


def evaluate_model(model, x_test, y_test):
    """
    √âvalue un mod√®le sur les donn√©es de test.

    Args:
        model (RandomForestClassifier): Mod√®le √† √©valuer.
        x_test (array-like): Donn√©es de test.
        y_test (array-like): Labels de test.

    Returns:
        dict: Dictionnaire contenant les m√©triques d'√©valuation.
    """
    print("üìä √âvaluation du mod√®le en cours...")
    y_pred = model.predict(x_test)

    metrics = {
        "Accuracy": accuracy_score(y_test, y_pred),
        "Precision": precision_score(y_test, y_pred),
        "Recall": recall_score(y_test, y_pred),
        "F1-score": f1_score(y_test, y_pred),
        "ROC-AUC": roc_auc_score(y_test, y_pred),
    }

    print("‚úÖ √âvaluation termin√©e.")
    for metric, value in metrics.items():
        print(f"{metric}: {value:.4f}")

    return metrics


def save_model(model, filename="random_forest.pkl"):
    """
    Sauvegarde un mod√®le entra√Æn√© sur disque.

    Args:
        model (RandomForestClassifier): Mod√®le √† sauvegarder.
        filename (str): Nom du fichier o√π enregistrer le mod√®le.
    """
    if model is None:
        print("‚ùå Erreur : Aucun mod√®le √† sauvegarder.")
        return
    joblib.dump(model, filename)
    print(f"üíæ Mod√®le sauvegard√© sous {filename}")


def load_model(filename="random_forest.pkl"):
    """
    Charge un mod√®le sauvegard√© depuis le disque.

    Args:
        filename (str): Nom du fichier contenant le mod√®le sauvegard√©.

    Returns:
        RandomForestClassifier or None: Le mod√®le charg√© ou None si √©chec.
    """
    try:
        print(f"üîÑ Chargement du mod√®le depuis {filename}...")
        model = joblib.load(filename)
        print("‚úÖ Mod√®le charg√© avec succ√®s !")
        return model
    except FileNotFoundError:
        print(f"‚ùå Erreur : Fichier {filename} introuvable.")
        return None
    except ValueError as error:
        print(f"‚ùå Erreur lors du chargement du mod√®le : {error}")
        return None
